{"version":3,"sources":["utils.js","Menu.js","List.js","ToDo.js","serviceWorker.js","index.js"],"names":["filterTasks","argument","concat","Object","toConsumableArray","document","querySelectorAll","forEach","task","classList","contains","hidden","Menu","props","countItems","react_default","a","createElement","className","onClick","List","tasks","completedTask","removeTask","completed","keys","map","key","length","src_Menu","ToDo","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showValue","event","target","value","state","eventValue","setState","prevState","copied","objectSpread","countTaks","countCompletedTasks","values","filter","copyTasks","autoFocus","placeholder","onKeyDown","src_List","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_ToDo_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.100e9004.chunk.js","sourcesContent":["let filterTasks = (argument) => {\n    let tasks = [\n      ...document.querySelectorAll('.completed'),\n      ...document.querySelectorAll('.active')];\n    // let removeButton = [...document.querySelectorAll('.remove-task')]\n    tasks.forEach(task => {\n      if (argument !== 'all') {\n        if (task.classList.contains(argument)) {\n          task.hidden = false;\n        } else {\n          task.hidden = true;\n        }\n      } else {\n        task.hidden = false;\n      }\n    })\n  }\n\n  export default filterTasks;","import React from 'react';\n\nconst Menu = (props) => {\n  let {\n    countItems,\n    filterTasks,\n    // completed\n  } = props;\n  return (\n    <div className=\"menu\">\n      <p className=\"count-left-items\">\n        <span className=\"count-items\">{countItems}</span>\n        items left\n      </p>\n      <button onClick={() => {\n        filterTasks('all')\n      }}>All</button>\n      <button onClick={() => {\n        filterTasks('active')\n      }}>Active</button>\n      <button onClick={() => {\n        filterTasks('completed')\n      }}>Completed</button>\n      {/* {completed ?\n        <button>Delete completed</button>\n        :\n        null} */}\n    </div>\n  );\n}\n\nexport default Menu;\n","import React from 'react'\nimport Menu from './Menu'\n\nconst List = (props) => {\n  let {\n    tasks,\n    completedTask,\n    countItems,\n    removeTask,\n    filterTasks,\n    completed\n  } = props;\n  return <ul>\n    {Object.keys(tasks).map((task) => {\n      return (\n        <li\n          key={task}\n          className={tasks[task] ? 'completed' : 'active'}>\n          <button className=\"completeBtn\"\n            onClick={\n              () => completedTask(task)\n            }\n          />\n          {task}\n          <button\n            className=\"remove-task\"\n            onClick={() => {\n              removeTask(task)\n            }}\n          >\n            X\n          </button>\n        </li>\n      )\n    })}\n    <li className=\"menu-item\">\n      {Object.keys(tasks).length ? \n      <Menu \n      countItems={countItems} \n      filterTasks = {filterTasks}\n      completed = {completed}\n      /> \n      : \n      null}\n    </li>\n  </ul>\n}\n\nexport default List;","import React from 'react';\nimport filterTasks from './utils'\nimport './ToDo.css';\nimport List from './List';\n\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props)\n    this.filterTasks = filterTasks;\n    this.state = {\n      tasks: {},\n      countItems: 0,\n      completed: {}\n    };\n  };\n\n  showValue = (event) => {\n    if (event.key === 'Enter') {\n      if (event.target.value && this.state.countItems !== 6) {\n        let eventValue = event.target.value;\n        event.target.value = '';\n        this.setState(prevState => {\n          let copied = { ...prevState.tasks };\n          let countTaks = this.countCompletedTasks(this.state.tasks)\n          copied[eventValue] = false;\n          prevState.countItems = countTaks + 1;\n          return { tasks: copied };\n        })\n      }\n    }\n  }\n\n  completedTask = (task) => {\n    this.setState(prevState => {\n      if (prevState.tasks[task]) {\n        prevState.countItems = prevState.countItems + 1;\n        return prevState.tasks[task] = false;\n      } else {\n        prevState.countItems = prevState.countItems - 1;\n        return prevState.tasks[task] = true;\n      }\n    })\n  }\n\n  countCompletedTasks = (tasks) => {\n    let completedTasks = Object.values(tasks)\n      .filter(task => !task)\n    return completedTasks.length;\n  }\n\n  removeTask = (task) => {\n    let copyTasks = this.state.tasks;\n    delete copyTasks[task];\n    this.setState({\n      tasks: copyTasks,\n      countItems: this.countCompletedTasks(this.state.tasks)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>todos</h1>\n        <div className=\"list\">\n          <input\n            className=\"taskAdder\"\n            autoFocus\n            placeholder=\"What needs to be done?\"\n            onKeyDown={this.showValue}\n          />\n          {Object.values(this.state.tasks).length ?\n            <List\n              tasks={this.state.tasks}\n              completedTask={this.completedTask}\n              countItems={this.state.countItems}\n              removeTask={this.removeTask}\n              filterTasks={this.filterTasks}\n              completed={this.state.completed}\n            /> :\n            null\n          }\n        </div>\n      </div>\n    )\n  };\n};\n\nexport default ToDo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ToDo from './ToDo.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ToDo />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}